{
  "name": "Bebe",
  "tagline": "My own LISP dialect, crafted with love.",
  "body": "# bebe\r\nMy own LISP dialect, crafted with love.\r\n\r\nInspired by Scheme and SICP. Simple, fast, extensible, it requires less code to complete simple task or computation. \r\n\r\nNow language support only basic arithmetic operations.\r\n\r\nSee wiki for installation instructions.\r\n\r\nEnjoy!\r\n\r\n## Installation\r\n\r\nAt the moment Bebe available and well tested at Debian based linux machines.\r\n\r\nTo compile Bebe from source you have to clone this repo, and then run make, from project folder.\r\n\r\nAfter compilation you should run bebe repl as ./repl from source folder or you might create a link to this file and put it into /usr/bin/\r\n\r\nGood luck!\r\n\r\n## Operators\r\n``` clojure\r\n+ 4 5  #=> 9\r\n- 2 1  #=> 1\r\n* 2 2  #=> 4\r\n/ 4 2  #=> 2\r\n% 10 6 #=> 4\r\n^ 2 3  #=> 8\r\n```\r\nYou can easily nest any number of operations using parenthesis. And pay some attention to the fact that first action do not require you to use parenthesis like ``` + 3 4 ``` and ``` (+ 3 4) ``` is wrong, that makes language less nested.\r\n\r\n``` clojure\r\n+ (/ \r\n     (/ 4 2) \r\n     (+ 1 1) \r\n  )\r\n  (- \r\n     (/ 8 2) \r\n     (- 3 2) \r\n  )\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}